// <auto-generated />
using System;
using FIleHandling;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace FIleHandling.Migrations
{
    [DbContext(typeof(FIleHandlingDbContext))]
    partial class FIleHandlingDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.8")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("FIleHandling.Movie", b =>
                {
                    b.Property<int>("MovieId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("MovieId"));

                    b.Property<bool?>("Action")
                        .HasColumnType("bit");

                    b.Property<bool?>("Adventure")
                        .HasColumnType("bit");

                    b.Property<bool?>("Animation")
                        .HasColumnType("bit");

                    b.Property<bool?>("Childrens")
                        .HasColumnType("bit");

                    b.Property<bool?>("Comedy")
                        .HasColumnType("bit");

                    b.Property<bool?>("Crime")
                        .HasColumnType("bit");

                    b.Property<bool?>("Documentary")
                        .HasColumnType("bit");

                    b.Property<bool?>("Drama")
                        .HasColumnType("bit");

                    b.Property<bool?>("Fantasy")
                        .HasColumnType("bit");

                    b.Property<bool?>("FilmNoir")
                        .HasColumnType("bit");

                    b.Property<bool?>("Horror")
                        .HasColumnType("bit");

                    b.Property<string>("ImdbLink")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("Musical")
                        .HasColumnType("bit");

                    b.Property<bool?>("Mystery")
                        .HasColumnType("bit");

                    b.Property<bool?>("Other")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("ReleaseDate")
                        .HasColumnType("date");

                    b.Property<bool?>("Romance")
                        .HasColumnType("bit");

                    b.Property<bool?>("ScienceFiction")
                        .HasColumnType("bit");

                    b.Property<bool?>("Thriller")
                        .HasColumnType("bit");

                    b.Property<string>("Title")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("War")
                        .HasColumnType("bit");

                    b.Property<bool?>("Western")
                        .HasColumnType("bit");

                    b.HasKey("MovieId");

                    b.ToTable("Movies");
                });

            modelBuilder.Entity("FIleHandling.Rating", b =>
                {
                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.Property<int>("MovieId")
                        .HasColumnType("int");

                    b.Property<int?>("Rating1")
                        .HasColumnType("int");

                    b.Property<int?>("Timestamp")
                        .HasColumnType("int");

                    b.HasKey("UserId");

                    b.HasIndex("MovieId");

                    b.ToTable("Ratings");
                });

            modelBuilder.Entity("FIleHandling.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<int?>("Age")
                        .HasColumnType("int");

                    b.Property<string>("Gender")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ZipCode")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("FIleHandling.Rating", b =>
                {
                    b.HasOne("FIleHandling.Movie", "Movie")
                        .WithMany("Ratings")
                        .HasForeignKey("MovieId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Ratings_Movies");

                    b.HasOne("FIleHandling.User", "User")
                        .WithMany("Ratings")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Ratings_Users");

                    b.Navigation("Movie");

                    b.Navigation("User");
                });

            modelBuilder.Entity("FIleHandling.Movie", b =>
                {
                    b.Navigation("Ratings");
                });

            modelBuilder.Entity("FIleHandling.User", b =>
                {
                    b.Navigation("Ratings");
                });
#pragma warning restore 612, 618
        }
    }
}
